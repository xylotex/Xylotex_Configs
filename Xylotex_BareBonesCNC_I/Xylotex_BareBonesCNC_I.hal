
#
########################################


# Launch the setup script to make sure hardware setup looks good
#loadusr -w /home/machinekit/machinekit/configs/ARM.BeagleBone.Xylotex/setup.sh
loadusr -w ../setup.sh
loadusr -w config-pin -f ./Xylotex_BareBonesCNC_I.bbio

# ###################################
# Core EMC/HAL Loads
# ###################################
# kinematics
loadrt trivkins

# trajectory planner
loadrt tp

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES  tp=tp kins=trivkins

# load low-level drivers (must not include pins used by PRU)
loadrt hal_bb_gpio output_pins=807,813,819,826,914,913,911 input_pins=809,810,814,818,808,926,924,925,922,921,920,919,918,917,916,942,931,929,927

#loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG)
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG) halname=hpg num_encoders=1
loadrt pid count=4
loadrt limit1 count=2

# logic gates, flip flops and mux
#loadrt and2 count=16
#loadrt or2 count=1
loadrt not count=11
loadrt mux4 count=1
loadrt logic count=4 personality=0x103,0x103,0x103,0x103  # AND is mode (0x100) with 3 inputs = 0x3 = 0x103
#loadrt flipflop count=2
loadrt conv_s32_bit count=1

# ################################################
# THREADS
# ################################################
# hpg = [PRUCONF](DRIVER)
addf hpg.capture-position                 servo-thread
addf bb_gpio.read                         servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
# Not doing PID for temperature sensor for PWM output
addf pid.0.do-pid-calcs                   servo-thread
addf pid.1.do-pid-calcs                   servo-thread
addf pid.2.do-pid-calcs                   servo-thread
addf pid.3.do-pid-calcs                   servo-thread
addf limit1.0                             servo-thread
addf limit1.1                             servo-thread
addf hpg.update                           servo-thread
# add logic gates,flip flops and mux
#addf and2.1                               servo-thread
#addf and2.2                               servo-thread
#addf and2.3                               servo-thread
#addf and2.4                               servo-thread
#addf and2.5                               servo-thread
#addf and2.6                               servo-thread
#addf and2.7                               servo-thread
#addf and2.8                               servo-thread
#addf and2.9                               servo-thread
#addf and2.10                              servo-thread
#addf and2.11                              servo-thread
#addf and2.12                              servo-thread
#addf and2.13                              servo-thread
#addf and2.14                              servo-thread
#addf and2.15                              servo-thread
#addf not.0                                servo-thread
#addf not.1                                servo-thread
addf not.2                                servo-thread
addf not.3                                servo-thread
addf not.4                                servo-thread
#addf not.5                                servo-thread
#addf not.6                                servo-thread
#addf not.7                                servo-thread
#addf not.8                                servo-thread
#addf not.9                                servo-thread
#addf not.10                                servo-thread
#addf or2.0                                servo-thread
addf mux4.0                               servo-thread
addf logic.0                              servo-thread
addf logic.1                              servo-thread
addf logic.2                              servo-thread
addf logic.3                              servo-thread
#addf flipflop.0                           servo-thread
#addf flipflop.1                           servo-thread
#addf conv_s32_bit.0                       servo-thread
#
addf bb_gpio.write                        servo-thread


# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################
# ################
# X [0] Axis
# ################
# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE

net emcmot.00.enable <= axis.0.amp-enable-out
net emcmot.00.enable => hpg.stepgen.00.enable pid.0.enable

# position command and feedback
net emcmot.00.pos-cmd axis.0.motor-pos-cmd => pid.0.command
net emcmot.00.vel-cmd axis.0.joint-vel-cmd => pid.0.command-deriv
net motor.00.pos-fb <= hpg.stepgen.00.position-fb axis.0.motor-pos-fb pid.0.feedback
net motor.00.command pid.0.output hpg.stepgen.00.velocity-cmd
setp pid.0.error-previous-target true
setp pid.0.maxerror .001

# timing parameters
setp hpg.stepgen.00.dirsetup        [AXIS_0]DIRSETUP
setp hpg.stepgen.00.dirhold         [AXIS_0]DIRHOLD

setp hpg.stepgen.00.steplen         [AXIS_0]STEPLEN
setp hpg.stepgen.00.stepspace       [AXIS_0]STEPSPACE

setp hpg.stepgen.00.position-scale  [AXIS_0]SCALE

setp hpg.stepgen.00.maxvel          [AXIS_0]STEPGEN_MAX_VEL
setp hpg.stepgen.00.maxaccel        [AXIS_0]STEPGEN_MAX_ACC

setp hpg.stepgen.00.control-type    1
setp hpg.stepgen.00.stepinvert      [AXIS_0]STEP_INVERT
#setp hpg.stepgen.00.step_type       0
setp hpg.stepgen.00.steppin         812
setp hpg.stepgen.00.dirpin          811

# set PID loop gains from inifile
setp pid.0.Pgain [AXIS_0]P
setp pid.0.Igain [AXIS_0]I
setp pid.0.Dgain [AXIS_0]D
setp pid.0.bias [AXIS_0]BIAS
setp pid.0.FF0 [AXIS_0]FF0
setp pid.0.FF1 [AXIS_0]FF1
setp pid.0.FF2 [AXIS_0]FF2
setp pid.0.deadband [AXIS_0]DEADBAND
setp pid.0.maxoutput [AXIS_0]MAX_OUTPUT

# Add X home switch input on DB25-11
#net home-x bb_gpio.p8.in-10 => axis.0.home-sw-in
net both-home-x <= bb_gpio.p8.in-10
net both-home-x => axis.0.home-sw-in
net both-home-x => axis.0.neg-lim-sw-in
net both-home-x => axis.0.pos-lim-sw-in
#setp bb_gpio.p8.in-10.invert 1

# ################
# Y [1] Axis
# ################
# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE

net emcmot.01.enable <= axis.1.amp-enable-out
net emcmot.01.enable => hpg.stepgen.01.enable pid.1.enable

# position command and feedback
net emcmot.01.pos-cmd axis.1.motor-pos-cmd => pid.1.command
net emcmot.01.vel-cmd axis.1.joint-vel-cmd => pid.1.command-deriv
net motor.01.pos-fb <= hpg.stepgen.01.position-fb axis.1.motor-pos-fb pid.1.feedback
net motor.01.command pid.1.output hpg.stepgen.01.velocity-cmd
setp pid.1.error-previous-target true
setp pid.1.maxerror .001

# timing parameters
setp hpg.stepgen.01.dirsetup        [AXIS_1]DIRSETUP
setp hpg.stepgen.01.dirhold         [AXIS_1]DIRHOLD

setp hpg.stepgen.01.steplen         [AXIS_1]STEPLEN
setp hpg.stepgen.01.stepspace       [AXIS_1]STEPSPACE

setp hpg.stepgen.01.position-scale  [AXIS_1]SCALE

setp hpg.stepgen.01.maxvel          [AXIS_1]STEPGEN_MAX_VEL
setp hpg.stepgen.01.maxaccel        [AXIS_1]STEPGEN_MAX_ACC

setp hpg.stepgen.01.control-type    1
setp hpg.stepgen.01.stepinvert      [AXIS_1]STEP_INVERT
#setp hpg.stepgen.01.step_type       0
setp hpg.stepgen.01.steppin         816
setp hpg.stepgen.01.dirpin          815

# set PID loop gains from inifile
setp pid.1.Pgain [AXIS_1]P
setp pid.1.Igain [AXIS_1]I
setp pid.1.Dgain [AXIS_1]D
setp pid.1.bias [AXIS_1]BIAS
setp pid.1.FF0 [AXIS_1]FF0
setp pid.1.FF1 [AXIS_1]FF1
setp pid.1.FF2 [AXIS_1]FF2
setp pid.1.deadband [AXIS_1]DEADBAND
setp pid.1.maxoutput [AXIS_1]MAX_OUTPUT

# Add Y home switch input on DB25-12
#net home-y bb_gpio.p8.in-14 => axis.1.home-sw-in
net both-home-y <= bb_gpio.p8.in-14
net both-home-y => axis.1.home-sw-in
net both-home-y => axis.1.neg-lim-sw-in
net both-home-y => axis.1.pos-lim-sw-in
#setp bb_gpio.p8.in-14.invert 1

# ################
# Z [2] Axis
# ################
# axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE

net emcmot.02.enable <= axis.2.amp-enable-out
net emcmot.02.enable => hpg.stepgen.02.enable pid.2.enable

# position command and feedback
net emcmot.02.pos-cmd axis.2.motor-pos-cmd => pid.2.command
net emcmot.02.vel-cmd axis.2.joint-vel-cmd => pid.2.command-deriv
net motor.02.pos-fb <= hpg.stepgen.02.position-fb axis.2.motor-pos-fb pid.2.feedback
net motor.02.command pid.2.output hpg.stepgen.02.velocity-cmd
setp pid.2.error-previous-target true
setp pid.2.maxerror .001

# timing parameters
setp hpg.stepgen.02.dirsetup        [AXIS_2]DIRSETUP
setp hpg.stepgen.02.dirhold         [AXIS_2]DIRHOLD

setp hpg.stepgen.02.steplen         [AXIS_2]STEPLEN
setp hpg.stepgen.02.stepspace       [AXIS_2]STEPSPACE

setp hpg.stepgen.02.position-scale  [AXIS_2]SCALE

setp hpg.stepgen.02.maxvel          [AXIS_2]STEPGEN_MAX_VEL
setp hpg.stepgen.02.maxaccel        [AXIS_2]STEPGEN_MAX_ACC

setp hpg.stepgen.02.control-type    1 
setp hpg.stepgen.02.stepinvert      [AXIS_2]STEP_INVERT
#setp hpg.stepgen.02.step_type       0
setp hpg.stepgen.02.steppin         915
setp hpg.stepgen.02.dirpin          923

# set PID loop gains from inifile
setp pid.2.Pgain [AXIS_2]P
setp pid.2.Igain [AXIS_2]I
setp pid.2.Dgain [AXIS_2]D
setp pid.2.bias [AXIS_2]BIAS
setp pid.2.FF0 [AXIS_2]FF0
setp pid.2.FF1 [AXIS_2]FF1
setp pid.2.FF2 [AXIS_2]FF2
setp pid.2.deadband [AXIS_2]DEADBAND
setp pid.2.maxoutput [AXIS_2]MAX_OUTPUT

# Add Z home switch input on DB25-13
#net home-z bb_gpio.p8.in-18 => axis.2.home-sw-in
net both-home-z <= bb_gpio.p8.in-18
net both-home-z => axis.2.home-sw-in
net both-home-z => axis.2.neg-lim-sw-in
net both-home-z => axis.2.pos-lim-sw-in
#setp bb_gpio.p8.in-18.invert 1

# ################
# A [3] Axis
# ################
# axis enable chain
newsig emcmot.03.enable bit
sets emcmot.03.enable FALSE

net emcmot.03.enable <= axis.3.amp-enable-out
net emcmot.03.enable => hpg.stepgen.03.enable pid.3.enable

# position command and feedback
net emcmot.03.pos-cmd axis.3.motor-pos-cmd => pid.3.command
net emcmot.03.vel-cmd axis.3.joint-vel-cmd => pid.3.command-deriv
net motor.03.pos-fb <= hpg.stepgen.03.position-fb axis.3.motor-pos-fb pid.3.feedback
net motor.03.command pid.3.output hpg.stepgen.03.velocity-cmd
setp pid.3.error-previous-target true
setp pid.3.maxerror .001

# timing parameters
setp hpg.stepgen.03.dirsetup        [AXIS_3]DIRSETUP
setp hpg.stepgen.03.dirhold         [AXIS_3]DIRHOLD

setp hpg.stepgen.03.steplen         [AXIS_3]STEPLEN
setp hpg.stepgen.03.stepspace       [AXIS_3]STEPSPACE

setp hpg.stepgen.03.position-scale  [AXIS_3]SCALE

setp hpg.stepgen.03.maxvel          [AXIS_3]STEPGEN_MAX_VEL
setp hpg.stepgen.03.maxaccel        [AXIS_3]STEPGEN_MAX_ACC

setp hpg.stepgen.03.control-type    1
setp hpg.stepgen.03.stepinvert      [AXIS_3]STEP_INVERT
#setp hpg.stepgen.03.step_type       0
setp hpg.stepgen.03.steppin         911
setp hpg.stepgen.03.dirpin          913

# set PID loop gains from inifile
setp pid.3.Pgain [AXIS_3]P
setp pid.3.Igain [AXIS_3]I
setp pid.3.Dgain [AXIS_3]D
setp pid.3.bias [AXIS_3]BIAS
setp pid.3.FF0 [AXIS_3]FF0
setp pid.3.FF1 [AXIS_3]FF1
setp pid.3.FF2 [AXIS_3]FF2
setp pid.3.deadband [AXIS_3]DEADBAND
setp pid.3.maxoutput [AXIS_3]MAX_OUTPUT


# Add A home switch input
#net home-a bb_gpio.p9.in-41 => axis.3.home-sw-in

# ##################################################
# Standard I/O - EStop, Enables, Limit Switches, Etc
# ##################################################

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# Axis enable and IO control enable signals are all on one pin P8-7 which
# goes to DB25-1
# and is used to place the LVC541 drivers on the interface board in active
# (LOW) or unactive (HIGH) state
# All external Inputs and Outputs on external boards
# should have pullups/downs since when the interface board is
# not enabled, it will look dosconnected for all signals

# this pin is output on DB25-1
# it is also used to enable the LVC541 driver/receiver on the interface board
#net machine-on bb_gpio.p8.out-07 bb_gpio.p8.out-26 => halui.machine.is-on
#setp bb_gpio.p8.out-07.invert 1

# this input signal must be active LOW to allow the system to energize.
# this should be fed through an NC STOP type switch from DB25-1 to DB25-10
#net estop-in bb_gpio.p8.in-09 => iocontrol.0.emc-enable-in
#setp bb_gpio.p8.in-09.invert 1
#newsig test bit
#sets test 1
#net test iocontrol.0.emc-enable-in
#net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in
#setp iocontrol.0.emc-enable-in true

#probe input on DB25-15
#net probe motion.probe-input <= bb_gpio.p8.in-18
#setp bb_gpio.p8.in-18.invert 1

# this currently goes to an LED on the interface board
# it is simply a duplicate of the enable signal on DB25-1 right now
#setp bb_gpio.p8.out-26.invert 1

# this input signal must be active LOW to allow the system to energize.
# this should be fed through an NC STOP type switch from DB25-1 to DB25-10
#net estop-in <= halui.machine.is-on
#net estop-in => bb_gpio.p8.in-09 
#net estop-in => iocontrol.0.emc-enable-in

setp iocontrol.0.emc-enable-in TRUE

#setp bb_gpio.p8.in-09.invert 1


# This output is on DB25-14 and is currently tied to spindle control (M3/M5)
#net Output1 bb_gpio.p8.out-13 => motion.spindle-on
#setp bb_gpio.p8.out-13.invert 1
#net Output1 bb_gpio.p8.out-13 => halui.spindle.is-on
net Output1 bb_gpio.p8.out-13 => motion.spindle-on
setp bb_gpio.p8.out-13.invert 1

# This output is on DB25-16
net Output2 bb_gpio.p8.out-19 => halui.mist.is-on
setp bb_gpio.p8.out-19.invert 1

# This output is on DB25-17 (M8/M9)
net Output3 bb_gpio.p9.out-14 => halui.flood.is-on
setp bb_gpio.p9.out-14.invert 1

net PAUSE bb_gpio.p8.in-08
net RESET bb_gpio.p9.in-20
net START bb_gpio.p9.in-25
net STOP  bb_gpio.p9.in-42
#net MUX_Y0 bb_gpio.p9.in-31
#net MUX_Y1 bb_gpio.p9.in-29
#net MUX_Y2 bb_gpio.p9.in-27
#net MUX_Z1 bb_gpio.p9.in-19
#net MUX_Z2 bb_gpio.p9.in-16


#Connect PRU to HAL for Jog signal A and B
setp hpg.encoder.00.chan.00.A-pin   2 # pr1_pru0_pru_r31_2 P9.30  PRU_0 *gpio3_16
setp hpg.encoder.00.chan.00.B-pin   3 # pr1_pru0_pru_r31_3 P9.28  PRU_0 *gpio3_17
setp hpg.encoder.00.chan.00.counter-mode 1 # X4 quadrature input

net Hand_Wheel <= hpg.encoder.00.chan.00.rawcounts
setp axis.0.jog-vel-mode 0
setp axis.1.jog-vel-mode 0
setp axis.2.jog-vel-mode 0

#logic for selecting jog rate with MUX
setp mux4.0.in3 0.1
setp mux4.0.in2 0.01
setp mux4.0.in1 0.001
setp mux4.0.in0 0.0001
#mux select input (1 of 4 rates)
net scale1 mux4.0.sel0 <= bb_gpio.p9.in-19
net scale2 mux4.0.sel1 <= bb_gpio.p9.in-16
net mpg-scale <= mux4.0.out
net mpg-scale => axis.0.jog-scale
net mpg-scale => axis.1.jog-scale
net mpg-scale => axis.2.jog-scale

#logic for selecting axis with 
net S_Y0 not.2.in logic.1.in-00 logic.3.in-00 <= bb_gpio.p9.in-31
net S_Y1 not.3.in logic.2.in-01 logic.3.in-01 <= bb_gpio.p9.in-29
net S_Y2 not.4.in <= bb_gpio.p9.in-27

net L00 logic.0.in-00 logic.2.in-00 <= not.2.out                            # not of bb_gpio.p9.in-31
net L01 logic.0.in-01 logic.1.in-01  <= not.3.out                            # not of bb_gpio.p9.in-29
net L02 logic.0.in-02 logic.1.in-02 logic.2.in-02 logic.3.in-02 <= not.4.out # not of bb_gpio.p9.in-27

net Hand_Wheel => axis.0.jog-counts
net Hand_Wheel => axis.1.jog-counts
net Hand_Wheel => axis.2.jog-counts
# rotary select switch select axis X..W (0..7)
# 0 0 0  !p27 and !p29 and !p31 for logic.0 axis X
# 0 0 1  !p27 and !p29 and  p31 for logic.1 axis Y 
# 0 1 0  !p27 and  p29 and !p31 for logic.2 axis Z
# 0 1 1  !p27 and  p29 and  p31 for logic.3 axis A
# 1 0 0   p27 and !p29 and !p31 for logic.4 if enabled using B input (i.e.use encoder wheel to scroll)
# 1 0 1   p27 and !p29 and  p31 for logic.5 if enabled using C input (i.e use encoder wheel to inc/dec rapid value)
# 1 1 0   p27 and  p29 and !p31 for logic.6 if enabled using U input (i.e use encoder wheel to inc/dec spindle speed)
# 1 1 1   p27 and  p29 and  p31 for logic.7 if enabled using W inpuy (i.e. something else)


net mpg-x axis.0.jog-enable <= logic.0.and
net mpg-y axis.1.jog-enable <= logic.1.and
net mpg-z axis.2.jog-enable <= logic.2.and
net mpg-a axis.3.jog-enable <= logic.3.and
#------------
# END-OF-FILE
#------------
